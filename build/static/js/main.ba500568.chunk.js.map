{"version":3,"sources":["componets/Todoitem.js","componets/Todos.js","componets/AddTodo.js","componets/pages/About.js","componets/layout/header.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","getStyle","textDecoration","props","todo","completed","markComplete","e","this","id","title","className","style","type","onChange","bind","onClick","deleteTodo","Component","Todos","todos","map","key","AddTodo","state","getTodo","setState","target","name","value","submitTodo","preventDefault","addTodo","onSubmit","for","aria-describedby","placeholder","About","Fragment","header","to","App","Axios","delete","then","res","filter","post","data","get","params","_limit","console","log","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba500568.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Todoitem extends Component {\r\n    getStyle = ()=>{\r\n        return{\r\n            textDecoration: this.props.todo.completed ? 'line-through': 'none',\r\n        }\r\n    }\r\n\r\n    markComplete = (e) =>{\r\n\r\n    }\r\n\r\n    render() {\r\n        const { id, title} = this.props.todo;\r\n        return (\r\n            <div className=\"d-flex\" style={this.getStyle()}>\r\n                <input className=\"my-auto mr-2\" type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} />\r\n                <p>{title}</p>\r\n                <button type=\"button\" className=\"btn btn-warning ml-2 my-auto rounded-circle\" onClick={this.props.deleteTodo.bind(this, id)}>x</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoitem.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\nexport default Todoitem\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Todoitem from './Todoitem';\r\n\r\nclass Todos extends Component {\r\n    render(){\r\n        return this.props.todos.map((todo)=>(\r\n            <Todoitem key={todo.id} todo={todo} markComplete={this.props.markComplete} deleteTodo={this.props.deleteTodo} />\r\n        ));\r\n\r\n    }\r\n}\r\n\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    getTodo = (e) =>{\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    submitTodo = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitTodo} className=\"mb-4\">\r\n                <div className=\"form-group\">\r\n                  <label for=\"#addtodos\"></label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"title\"\r\n                    id=\"addtodos\"\r\n                    aria-describedby=\"helpId\"\r\n                    placeholder=\"add a todo\"\r\n                    value={this.state.title}\r\n                    onChange={this.getTodo}\r\n                   />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default AddTodo\r\n","import React, { Component } from 'react'\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>this is an about page</p>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"bg-dark text-white p-3\">\r\n                <h1 className=\"m-0\">Todo list</h1>\r\n                <Link to=\"/\" className=\"text-white\">Home</Link> | <Link className=\"text-white\" to=\"/about\">About</Link>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default header\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Todos from './componets/Todos';\nimport AddTodo from './componets/AddTodo';\nimport About from './componets/pages/About';\nimport Header from './componets/layout/header';\n// import uuid from 'uuid';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    Axios.get(\"https://jsonplaceholder.typicode.com/todos\",{ params: { _limit: 10} } )\n    .then(res => this.setState({ todos: res.data.map(todo => {return todo}) }))\n  }\n\n  markComplete = (id) =>{\n    this.setState({ todos: this.state.todos.map(todo => { \n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n     }) \n    })\n  }\n\n  deleteTodo = (id)=>{\n    Axios.delete(\"https://jsonplaceholder.typicode.com/todos/\"+id)\n    .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }))\n  }\n\n  addTodo = (title)=>{\n    Axios.post(\"https://jsonplaceholder.typicode.com/todos\", {  title, completed: false  })\n    .then(res => this.setState({ todos: [...this.state.todos, res.data] }));\n  }\n\n  render(){\n    console.log(this.state.todos);\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                 <div className=\"App-header\">\n                   <AddTodo addTodo={this.addTodo} />\n                   <Todos todos={this.state.todos} markComplete={this.markComplete} deleteTodo={this.deleteTodo}/>\n                   </div>\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}